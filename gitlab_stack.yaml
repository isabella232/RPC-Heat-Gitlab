heat_template_version: 2013-05-23

description: |
  Deploys Salt-master and a Gitlab server.

parameters:

  keyname:
    type: string
    label: Salt-Master Key Name
    description: Name of the key used to ssh into the Salt-Master.

  image:
    type: string
    label: Image Name
    description: Name of the existing image to use for every virtual machine created by this stack. The image should have the heat-config and heat-config-script files included.

  floating-network-id:
    type: string
    label: External Network UUID
    description: UUID of the external network. The private network created by this stack will route to this network. Any floating IP addresses needed by this stack will also route to this network.

  flavor:
    type: string
    label: Flavor
    description: Flavor (size) of Gitlab instances.
    default: m1.small

  gitlab-from-email:
    type: string
    default: admin@example.com
    label: Gitlab FROM email
    description: Email address that Gitlab uses to send emails from.
  gitlab-hostname:
    type: string
    default: example.com
    label: Hostname for Gitlab
    description: Hostname for Gitlab.

resources:

  # Random string to aid in naming things.
  stack-string:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  # Will be used to generate a random password
  # 32 characters long consisting of alpha numeric characters
  secret:
    type: OS::Heat::RandomString
    properties:
      length: 32
      sequence: lettersdigits

  admin_password:
    type: OS::Heat::RandomString
    properties:
      length: 10
      sequence: lettersdigits

  #This is the security group for the gitlab node to allow mysql, web, icmp, and  ssh traffic
  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: gitlab-$stackstr-secgroup
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      description: Ping, SSH, Rails, SMTP, mail, IMAP, POP3 traffic is allowed
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 80
        port_range_max: 80
      - protocol: tcp
        port_range_min: 443
        port_range_max: 443
      - protocol: tcp
        port_range_min: 8080
        port_range_max: 8080
      - protocol: tcp
        port_range_min: 465
        port_range_max: 465
      - protocol: tcp
        port_range_min: 456
        port_range_max: 456
      - protocol: tcp
        port_range_min: 25
        port_range_max: 25
      - protocol: tcp
        port_range_min: 587
        port_range_max: 587
      - protocol: tcp
        port_range_min: 143
        port_range_max: 143
      - protocol: tcp
        port_range_min: 110
        port_range_max: 110
      - protocol: tcp
        port_range_min: 995
        port_range_max: 995
      - protocol: tcp
        port_range_min: 4505
        port_range_max: 4506
      

  # Keypair for communicating between nodes within the stack.
  # Will allow minions to ssh into the master and vice versa.
  coms:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: gitlab-$stackstr-coms
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      save_private_key: true

  # Private network for this stack
  net:
    type: OS::Neutron::Net

  # Private subnet for this stack
  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id:
        get_resource: net
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 8.8.8.8
        - 4.2.2.2

  # Routes the private network to the external network.
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network:
          get_param: floating-network-id

  # Router interface
  interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        get_resource: router
      subnet_id:
        get_resource: subnet

  # One floating ip for the salt-master node
  master-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: floating-network-id
        
  # One floating ip for the salt-master node
  gitlab-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: floating-network-id

  # One port for the salt-master node
  master-port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: net
      security_groups:
        - get_resource: secgroup
        
  gitlab-port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: net
      security_groups:
        - get_resource: secgroup

  # Software configuration script for the salt-master node
  # Installs salt-master, sets permission on some personality files
  # and uses git to clone any provided state/formula repos
  config-salt-master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: state_repos
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-salt-master
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0

        chmod -R 0600 ${logdir}
        chmod 0700 /root/.ssh/coms_rsa

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install git
        apt-get install -y git

        # Install salt master
        echo "Install Salt Master"
        add-apt-repository ppa:saltstack/salt
        apt-get update
        apt-get install -y git salt-master
        mkdir -p /srv/salt
        
        echo -e 'file_roots:\n  base:\n    - /srv/salt' >> /etc/salt/master

        # Clone state/formula repos in state root directory
        cd /srv/salt        
        while read -r line
        do
          if [ -n "$line" ]; then
            git clone $line
          fi
        done <<< "$state_repos"

        

        # Finally - Restart salt service
        service salt-master restart

        touch ${prefix}.ran

  # Software configuration for salt minion
  # Installs salt-minion, sets up authentication from minion to master,
  # and sets permissions of any personality files.
  config-salt-minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: master
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-salt-minion
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0

        chmod -R 0600 ${logdir}
        chmod 0700 /root/.ssh/coms_rsa

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install salt minion
        add-apt-repository ppa:saltstack/salt
        apt-get update -y
        apt-get install -y salt-minion
        echo master: $master >> /etc/salt/minion

        service salt-minion restart

        ssh-keyscan -H $master >> /root/.ssh/known_hosts

        MASTER_PKI_PATH="/etc/salt/pki/master/minions/"
        MASTER_PKI_PATH_PRE="/etc/salt/pki/master/minions_pre/"
        MINION_PKI_PATH="/etc/salt/pki/minion/minion.pub"
        HOSTNAME="$(python  -c 'import socket; print socket.getfqdn()')"

        while [ ! -s ${MINION_PKI_PATH} ]; do
            echo "Waiting for ${MINION_PKI_PATH} to have non-zero content."
            sleep 2
        done

        cp $MINION_PKI_PATH /root/minion_key

        scp -i /root/.ssh/coms_rsa /root/minion_key root@$master:/tmp/$HOSTNAME

        ssh -i /root/.ssh/coms_rsa root@$master "mv /tmp/$HOSTNAME $MASTER_PKI_PATH$HOSTNAME; chmod 700 $MASTER_PKI_PATH$HOSTNAME; rm $MASTER_PKI_PATH_PRE$HOSTNAME"

        service salt-minion restart
        rm /root/minion_key
        rm /root/.ssh/coms_rsa
        /sbin/ifconfig -a | /usr/bin/awk '/eth.*Ethernet/ {print $1}' | while read E; do /usr/bin/sudo /sbin/dhclient $E; done
        touch ${prefix}.ran

  # Software deployment for salt-master. Deploys the salt-master software
  # configuration.
  # Also lists the git repos necessary.
  deploy-salt-master:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        state_repos: |
          https://github.com/rcbops/gitlab-formula
          https://github.com/rcbops/base-hardening-formula
      config:
        get_resource: config-salt-master
      server:
        get_resource: master

  # The salt master instance
  # Should have one floating ip
  master:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      key_name:
        get_param: keyname
      image:
        get_param: image
      flavor: m1.small
      name:
        str_replace:
          template: gitlab-$stackstr-master
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      personality:
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        /srv/salt/top.sls: |
          base:
            'roles:gitlab':
              - match: grain
              - gitlab-formula

        /srv/pillar/top.sls: |
          base:
            '*':
              - app
            'roles:gitlab':
              - match: grain
              - gitlab

        /srv/pillar/app.sls: |
          user-ports:
            ssh:
              chain: INPUT
              proto: tcp
              dport: 22
            salt-master:
              chain: INPUT
              proto: tcp
              dport: 4505
            salt-minion:
              chain: INPUT
              proto: tcp
              dport: 4506
            http:
              chain: INPUT
              proto: tcp
              dport: 80
            https:
              chain: INPUT
              proto: tcp
              dport: 443
            http-8080:
              chain: INPUT
              proto: tcp
              dport: 8080
            mail-465:
              chain: INPUT
              proto: tcp
              dport: 465
            mail-456:
              chain: INPUT
              proto: tcp
              dport: 456
            mail-25:
              chain: INPUT
              proto: tcp
              dport: 25
            mail-587:
              chain: INPUT
              proto: tcp
              dport: 587
            mail-143:
              chain: INPUT
              proto: tcp
              dport: 143
            mail-110:
              chain: INPUT
              proto: tcp
              dport: 110
            mail-995:
              chain: INPUT
              proto: tcp
              dport: 995
          interfaces:
            private: eth0
            public: eth0
          mine_functions:
            network.ip_addrs: [eth0]
            network.interfaces: []
          mine_interval: 1
          
        /srv/pillar/gitlab.sls: 
          str_replace:
            template: |
              gitlab:
                gitlab_hostname: $gitlabhostname
                gitlab_from_email: $gitlabfromemail
            params:
              $gitlabhostname:
                get_param:
                  - gitlab-hostname
                
              $gitlabfromemail:
                get_param:
                  - gitlab-from-email    
                  
      networks:
        - port:
            get_resource: master-port
      user_data_format: SOFTWARE_CONFIG

  # Associate the master floating ip to the master port
  master-floating-ip-ass:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id:
        get_resource: master-ip
      port_id:
        get_resource: master-port
        
  # Associate the master floating ip to the master port
  gitlab-floating-ip-ass:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id:
        get_resource: gitlab-ip
      port_id:
        get_resource: gitlab-port      
  
  # gitlab minion
  minion-gitlab:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      flavor:
        get_param: flavor
      image:
        get_param: image
      name:
        str_replace:
          template: gitlab-$stackstr-server
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      personality:

        # Private key for node to node communication
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        # Set the salt role to gitlab
        /etc/salt/grains: |
          roles:
            - gitlab

      networks:
        - port:
            get_resource: gitlab-port

      # Needs to be SOFTWARE_CONFIG when using SoftwareConfigs
      user_data_format: SOFTWARE_CONFIG


  # Deploys the salt-minion software config to the gitlab node.
  deploy-gitlab:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy-salt-master
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        master:
          get_attr:
            - master
            - first_address
      config:
        get_resource: config-salt-minion
      server:
        get_resource: minion-gitlab
  
  # SoftwareConfig that is to run on master.
  # Executes a salt state.highstate on all attached minions.
  config-deploy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-deploy
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        salt '*' saltutil.refresh_pillar
        salt '*' mine.update
        salt '*' state.highstate
        salt -t 90 -l debug '*' state.sls base-hardening-formula.base-hardening-formula
        touch ${prefix}.ran

  # Deploys the the deploy softwareconfig
  # All minions should be spun up and running salt-minion
  # before executing this deployment.
  deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config-deploy
      server:
        get_resource: master
    depends_on:
      - deploy-salt-master
      - deploy-gitlab

outputs:
  master-ip:
    value:
      get_attr:
        - master-ip
        - floating_ip_address
